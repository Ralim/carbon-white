[package]
name = "carbon-white"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
leptos = { version = "0.8" }
leptos_meta = { version = "0.8" }
leptos_router = { version = "0.8" }
leptos_axum = { version = "0.8", optional = true }
leptos_router_macro = "0.8"

wasm-bindgen = "0.2"
console_error_panic_hook = "0.1"
console_log = "1"
log = "0.4"
web-sys = { version = "0.3", features = ["HtmlInputElement", "FileList", "File", "Blob", "Window", "Storage", "Request", "RequestInit", "Response", "Headers", "XmlHttpRequest", "FormData"] }
wasm-bindgen-futures = "0.4"
serde-wasm-bindgen = "0.6"
js-sys = "0.3"

# Server dependencies
axum = { version = "0.8", optional = true, features = ["multipart"] }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.5", features = ["util"], optional = true }
tower-http = { version = "0.6", features = ["fs"], optional = true }
sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "sqlite"], optional = true }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
sha2 = { version = "0.10", optional = true }
jsonwebtoken = { version = "10", features = ["rust_crypto"], optional = true }
chrono = { version = "0.4", features = ["serde"], optional = true }
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", optional = true }
mime_guess = { version = "2.0", optional = true }
futures-util = { version = "0.3", optional = true }
once_cell = "1.19"
urlencoding = "2.1"

# Client-side HTTP requests
gloo-net = { version = "0.6", features = ["http"], optional = true }
gloo-timers = "0.3"
thiserror = "2.0"

[dev-dependencies]
tempfile = "3.0"

[features]
hydrate = ["leptos/hydrate",  "dep:gloo-net"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "dep:sqlx",
    "dep:uuid",
    "dep:sha2",
    "dep:jsonwebtoken",
    "dep:chrono",
    "dep:tracing",
    "dep:tracing-subscriber",
    "dep:mime_guess",
    "dep:futures-util",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr"
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS bindings
output-name = "carbon-white"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg-dir>/app.css
style-file = "style/main.scss"

# Assets source dir. These files are copied as-is to the site-root directory.
assets-dir = "assets"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
